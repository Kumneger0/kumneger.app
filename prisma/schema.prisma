generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Comment       Comment[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id       Int       @id @default(autoincrement())
  asset_id String    @unique
  title    String
  comments Comment[]
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  postId          Int
  parentCommentId Int?
  userId          String?
  User            User?     @relation(fields: [userId], references: [id])
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  post            Post      @relation(fields: [postId], references: [id])
  votes           Vote[]
}

model Vote {
  id        Int     @id @default(autoincrement())
  commentId Int
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  isUpvote  Boolean

  @@unique([userId, commentId, isUpvote])
}
